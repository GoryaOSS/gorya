// Code generated by mockery v2.32.4. DO NOT EDIT.

package worker

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// Dispatch provides a mock function with given fields: ctx, e
func (_m *MockInterface) Dispatch(ctx context.Context, e *QueueElem) error {
	ret := _m.Called(ctx, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueueElem) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type MockInterface_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
//   - ctx context.Context
//   - e *QueueElem
func (_e *MockInterface_Expecter) Dispatch(ctx interface{}, e interface{}) *MockInterface_Dispatch_Call {
	return &MockInterface_Dispatch_Call{Call: _e.mock.On("Dispatch", ctx, e)}
}

func (_c *MockInterface_Dispatch_Call) Run(run func(ctx context.Context, e *QueueElem)) *MockInterface_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*QueueElem))
	})
	return _c
}

func (_c *MockInterface_Dispatch_Call) Return(_a0 error) *MockInterface_Dispatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Dispatch_Call) RunAndReturn(run func(context.Context, *QueueElem) error) *MockInterface_Dispatch_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: ctx, resultChan, errChan
func (_m *MockInterface) Process(ctx context.Context, resultChan chan<- string, errChan chan<- error) {
	_m.Called(ctx, resultChan, errChan)
}

// MockInterface_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockInterface_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - resultChan chan<- string
//   - errChan chan<- error
func (_e *MockInterface_Expecter) Process(ctx interface{}, resultChan interface{}, errChan interface{}) *MockInterface_Process_Call {
	return &MockInterface_Process_Call{Call: _e.mock.On("Process", ctx, resultChan, errChan)}
}

func (_c *MockInterface_Process_Call) Run(run func(ctx context.Context, resultChan chan<- string, errChan chan<- error)) *MockInterface_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- string), args[2].(chan<- error))
	})
	return _c
}

func (_c *MockInterface_Process_Call) Return() *MockInterface_Process_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_Process_Call) RunAndReturn(run func(context.Context, chan<- string, chan<- error)) *MockInterface_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
