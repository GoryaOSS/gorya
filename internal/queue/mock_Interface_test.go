// Code generated by mockery v2.32.4. DO NOT EDIT.

package queue

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// Dequeue provides a mock function with given fields: ctx, out, errChan
func (_m *MockInterface) Dequeue(ctx context.Context, out chan<- string, errChan chan<- error) {
	_m.Called(ctx, out, errChan)
}

// MockInterface_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type MockInterface_Dequeue_Call struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
//   - ctx context.Context
//   - out chan<- string
//   - errChan chan<- error
func (_e *MockInterface_Expecter) Dequeue(ctx interface{}, out interface{}, errChan interface{}) *MockInterface_Dequeue_Call {
	return &MockInterface_Dequeue_Call{Call: _e.mock.On("Dequeue", ctx, out, errChan)}
}

func (_c *MockInterface_Dequeue_Call) Run(run func(ctx context.Context, out chan<- string, errChan chan<- error)) *MockInterface_Dequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- string), args[2].(chan<- error))
	})
	return _c
}

func (_c *MockInterface_Dequeue_Call) Return() *MockInterface_Dequeue_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_Dequeue_Call) RunAndReturn(run func(context.Context, chan<- string, chan<- error)) *MockInterface_Dequeue_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: ctx, v
func (_m *MockInterface) Enqueue(ctx context.Context, v interface{}) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockInterface_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - v interface{}
func (_e *MockInterface_Expecter) Enqueue(ctx interface{}, v interface{}) *MockInterface_Enqueue_Call {
	return &MockInterface_Enqueue_Call{Call: _e.mock.On("Enqueue", ctx, v)}
}

func (_c *MockInterface_Enqueue_Call) Run(run func(ctx context.Context, v interface{})) *MockInterface_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockInterface_Enqueue_Call) Return(_a0 error) *MockInterface_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Enqueue_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockInterface_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// IsEmpty provides a mock function with given fields: ctx
func (_m *MockInterface) IsEmpty(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type MockInterface_IsEmpty_Call struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInterface_Expecter) IsEmpty(ctx interface{}) *MockInterface_IsEmpty_Call {
	return &MockInterface_IsEmpty_Call{Call: _e.mock.On("IsEmpty", ctx)}
}

func (_c *MockInterface_IsEmpty_Call) Run(run func(ctx context.Context)) *MockInterface_IsEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInterface_IsEmpty_Call) Return(_a0 bool, _a1 error) *MockInterface_IsEmpty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_IsEmpty_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockInterface_IsEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
