// Code generated by mockery v2.32.4. DO NOT EDIT.

package fake

import (
	models "github.com/nduyphuong/gorya/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// DeletePolicy provides a mock function with given fields: name
func (_m *Interface) DeletePolicy(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSchedule provides a mock function with given fields: name
func (_m *Interface) DeleteSchedule(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPolicyByName provides a mock function with given fields: name
func (_m *Interface) GetPolicyByName(name string) (*models.Policy, error) {
	ret := _m.Called(name)

	var r0 *models.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Policy, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Policy); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicyBySchedule provides a mock function with given fields: name
func (_m *Interface) GetPolicyBySchedule(name string) (*[]models.Policy, error) {
	ret := _m.Called(name)

	var r0 *[]models.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]models.Policy, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *[]models.Policy); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchedule provides a mock function with given fields: name
func (_m *Interface) GetSchedule(name string) (*models.ScheduleModel, error) {
	ret := _m.Called(name)

	var r0 *models.ScheduleModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.ScheduleModel, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *models.ScheduleModel); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ScheduleModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicy provides a mock function with given fields:
func (_m *Interface) ListPolicy() (*[]models.Policy, error) {
	ret := _m.Called()

	var r0 *[]models.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]models.Policy, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]models.Policy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchedule provides a mock function with given fields:
func (_m *Interface) ListSchedule() (*[]models.ScheduleModel, error) {
	ret := _m.Called()

	var r0 *[]models.ScheduleModel
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]models.ScheduleModel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]models.ScheduleModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.ScheduleModel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePolicy provides a mock function with given fields: policy
func (_m *Interface) SavePolicy(policy models.Policy) error {
	ret := _m.Called(policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Policy) error); ok {
		r0 = rf(policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSchedule provides a mock function with given fields: schedule
func (_m *Interface) SaveSchedule(schedule models.ScheduleModel) error {
	ret := _m.Called(schedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ScheduleModel) error); ok {
		r0 = rf(schedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
