// Code generated by mockery v2.32.4. DO NOT EDIT.

package store

import (
	models "github.com/nduyphuong/gorya/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// DeletePolicy provides a mock function with given fields: name
func (_m *MockInterface) DeletePolicy(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_DeletePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicy'
type MockInterface_DeletePolicy_Call struct {
	*mock.Call
}

// DeletePolicy is a helper method to define mock.On call
//   - name string
func (_e *MockInterface_Expecter) DeletePolicy(name interface{}) *MockInterface_DeletePolicy_Call {
	return &MockInterface_DeletePolicy_Call{Call: _e.mock.On("DeletePolicy", name)}
}

func (_c *MockInterface_DeletePolicy_Call) Run(run func(name string)) *MockInterface_DeletePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_DeletePolicy_Call) Return(_a0 error) *MockInterface_DeletePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_DeletePolicy_Call) RunAndReturn(run func(string) error) *MockInterface_DeletePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSchedule provides a mock function with given fields: name
func (_m *MockInterface) DeleteSchedule(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_DeleteSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSchedule'
type MockInterface_DeleteSchedule_Call struct {
	*mock.Call
}

// DeleteSchedule is a helper method to define mock.On call
//   - name string
func (_e *MockInterface_Expecter) DeleteSchedule(name interface{}) *MockInterface_DeleteSchedule_Call {
	return &MockInterface_DeleteSchedule_Call{Call: _e.mock.On("DeleteSchedule", name)}
}

func (_c *MockInterface_DeleteSchedule_Call) Run(run func(name string)) *MockInterface_DeleteSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_DeleteSchedule_Call) Return(_a0 error) *MockInterface_DeleteSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_DeleteSchedule_Call) RunAndReturn(run func(string) error) *MockInterface_DeleteSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyByName provides a mock function with given fields: name
func (_m *MockInterface) GetPolicyByName(name string) (*models.Policy, error) {
	ret := _m.Called(name)

	var r0 *models.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Policy, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Policy); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetPolicyByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyByName'
type MockInterface_GetPolicyByName_Call struct {
	*mock.Call
}

// GetPolicyByName is a helper method to define mock.On call
//   - name string
func (_e *MockInterface_Expecter) GetPolicyByName(name interface{}) *MockInterface_GetPolicyByName_Call {
	return &MockInterface_GetPolicyByName_Call{Call: _e.mock.On("GetPolicyByName", name)}
}

func (_c *MockInterface_GetPolicyByName_Call) Run(run func(name string)) *MockInterface_GetPolicyByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetPolicyByName_Call) Return(_a0 *models.Policy, _a1 error) *MockInterface_GetPolicyByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetPolicyByName_Call) RunAndReturn(run func(string) (*models.Policy, error)) *MockInterface_GetPolicyByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyBySchedule provides a mock function with given fields: name
func (_m *MockInterface) GetPolicyBySchedule(name string) (*[]models.Policy, error) {
	ret := _m.Called(name)

	var r0 *[]models.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]models.Policy, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *[]models.Policy); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetPolicyBySchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyBySchedule'
type MockInterface_GetPolicyBySchedule_Call struct {
	*mock.Call
}

// GetPolicyBySchedule is a helper method to define mock.On call
//   - name string
func (_e *MockInterface_Expecter) GetPolicyBySchedule(name interface{}) *MockInterface_GetPolicyBySchedule_Call {
	return &MockInterface_GetPolicyBySchedule_Call{Call: _e.mock.On("GetPolicyBySchedule", name)}
}

func (_c *MockInterface_GetPolicyBySchedule_Call) Run(run func(name string)) *MockInterface_GetPolicyBySchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetPolicyBySchedule_Call) Return(_a0 *[]models.Policy, _a1 error) *MockInterface_GetPolicyBySchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetPolicyBySchedule_Call) RunAndReturn(run func(string) (*[]models.Policy, error)) *MockInterface_GetPolicyBySchedule_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchedule provides a mock function with given fields: name
func (_m *MockInterface) GetSchedule(name string) (*models.ScheduleModel, error) {
	ret := _m.Called(name)

	var r0 *models.ScheduleModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.ScheduleModel, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *models.ScheduleModel); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ScheduleModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchedule'
type MockInterface_GetSchedule_Call struct {
	*mock.Call
}

// GetSchedule is a helper method to define mock.On call
//   - name string
func (_e *MockInterface_Expecter) GetSchedule(name interface{}) *MockInterface_GetSchedule_Call {
	return &MockInterface_GetSchedule_Call{Call: _e.mock.On("GetSchedule", name)}
}

func (_c *MockInterface_GetSchedule_Call) Run(run func(name string)) *MockInterface_GetSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetSchedule_Call) Return(_a0 *models.ScheduleModel, _a1 error) *MockInterface_GetSchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetSchedule_Call) RunAndReturn(run func(string) (*models.ScheduleModel, error)) *MockInterface_GetSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicy provides a mock function with given fields:
func (_m *MockInterface) ListPolicy() (*[]models.Policy, error) {
	ret := _m.Called()

	var r0 *[]models.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]models.Policy, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]models.Policy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_ListPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicy'
type MockInterface_ListPolicy_Call struct {
	*mock.Call
}

// ListPolicy is a helper method to define mock.On call
func (_e *MockInterface_Expecter) ListPolicy() *MockInterface_ListPolicy_Call {
	return &MockInterface_ListPolicy_Call{Call: _e.mock.On("ListPolicy")}
}

func (_c *MockInterface_ListPolicy_Call) Run(run func()) *MockInterface_ListPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_ListPolicy_Call) Return(_a0 *[]models.Policy, _a1 error) *MockInterface_ListPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_ListPolicy_Call) RunAndReturn(run func() (*[]models.Policy, error)) *MockInterface_ListPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchedule provides a mock function with given fields:
func (_m *MockInterface) ListSchedule() (*[]models.ScheduleModel, error) {
	ret := _m.Called()

	var r0 *[]models.ScheduleModel
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]models.ScheduleModel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]models.ScheduleModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.ScheduleModel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_ListSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchedule'
type MockInterface_ListSchedule_Call struct {
	*mock.Call
}

// ListSchedule is a helper method to define mock.On call
func (_e *MockInterface_Expecter) ListSchedule() *MockInterface_ListSchedule_Call {
	return &MockInterface_ListSchedule_Call{Call: _e.mock.On("ListSchedule")}
}

func (_c *MockInterface_ListSchedule_Call) Run(run func()) *MockInterface_ListSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_ListSchedule_Call) Return(_a0 *[]models.ScheduleModel, _a1 error) *MockInterface_ListSchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_ListSchedule_Call) RunAndReturn(run func() (*[]models.ScheduleModel, error)) *MockInterface_ListSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// SavePolicy provides a mock function with given fields: policy
func (_m *MockInterface) SavePolicy(policy models.Policy) error {
	ret := _m.Called(policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Policy) error); ok {
		r0 = rf(policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SavePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePolicy'
type MockInterface_SavePolicy_Call struct {
	*mock.Call
}

// SavePolicy is a helper method to define mock.On call
//   - policy models.Policy
func (_e *MockInterface_Expecter) SavePolicy(policy interface{}) *MockInterface_SavePolicy_Call {
	return &MockInterface_SavePolicy_Call{Call: _e.mock.On("SavePolicy", policy)}
}

func (_c *MockInterface_SavePolicy_Call) Run(run func(policy models.Policy)) *MockInterface_SavePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Policy))
	})
	return _c
}

func (_c *MockInterface_SavePolicy_Call) Return(_a0 error) *MockInterface_SavePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SavePolicy_Call) RunAndReturn(run func(models.Policy) error) *MockInterface_SavePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSchedule provides a mock function with given fields: schedule
func (_m *MockInterface) SaveSchedule(schedule models.ScheduleModel) error {
	ret := _m.Called(schedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ScheduleModel) error); ok {
		r0 = rf(schedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SaveSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSchedule'
type MockInterface_SaveSchedule_Call struct {
	*mock.Call
}

// SaveSchedule is a helper method to define mock.On call
//   - schedule models.ScheduleModel
func (_e *MockInterface_Expecter) SaveSchedule(schedule interface{}) *MockInterface_SaveSchedule_Call {
	return &MockInterface_SaveSchedule_Call{Call: _e.mock.On("SaveSchedule", schedule)}
}

func (_c *MockInterface_SaveSchedule_Call) Run(run func(schedule models.ScheduleModel)) *MockInterface_SaveSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ScheduleModel))
	})
	return _c
}

func (_c *MockInterface_SaveSchedule_Call) Return(_a0 error) *MockInterface_SaveSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SaveSchedule_Call) RunAndReturn(run func(models.ScheduleModel) error) *MockInterface_SaveSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
