// Code generated by mockery v2.32.4. DO NOT EDIT.

package aws

import (
	ec2 "github.com/nduyphuong/gorya/pkg/aws/ec2"
	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// EC2 provides a mock function with given fields:
func (_m *MockInterface) EC2() ec2.Interface {
	ret := _m.Called()

	var r0 ec2.Interface
	if rf, ok := ret.Get(0).(func() ec2.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ec2.Interface)
		}
	}

	return r0
}

// MockInterface_EC2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EC2'
type MockInterface_EC2_Call struct {
	*mock.Call
}

// EC2 is a helper method to define mock.On call
func (_e *MockInterface_Expecter) EC2() *MockInterface_EC2_Call {
	return &MockInterface_EC2_Call{Call: _e.mock.On("EC2")}
}

func (_c *MockInterface_EC2_Call) Run(run func()) *MockInterface_EC2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_EC2_Call) Return(_a0 ec2.Interface) *MockInterface_EC2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_EC2_Call) RunAndReturn(run func() ec2.Interface) *MockInterface_EC2_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
